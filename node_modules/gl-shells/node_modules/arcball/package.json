{
  "name": "arcball",
  "version": "0.0.0",
  "description": "A simple library agnostic arcball camera.",
  "main": "arcball.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/Arcball.git"
  },
  "keywords": [
    "arcball",
    "3D",
    "quaternion",
    "webgl"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "2b1e7856deb7a91011228cb36c4fd2feedba0a53",
  "readme": "Arcball\n=======\n\nA simple library-agnostic arcball camera in Javascript\n\nInstallation\n============\n\n    npm install arcball\n    \nExample\n=======\n\n    var ArcballCamera = require('arcball').ArcballCamera;\n    var camera = new ArcballCamera();\n\n    // ... in mouse event handler\n    camera.update(mouse_x, mouse_y, {\n      rotate:   mouse_left_clicked,\n      pan:      mouse_right_clicked,\n      zoom:     mouse_middle_clicked\n    });\n    \n    // ... in rendering loop\n    var camera_matrix = camera.matrix();\n\n\nAPI\n===\n\n## `ArcballCamera()`\n\nThe main camera object\n\n### `ArcballCamera.update(mouse_x, mouse_y, flags)`\n\nUpdates the camera state using the mouse input.  `mouse_x` and `mouse_y` are the x/y coordinates of the mouse, `flags` is an object containing the boolean flags `rotate`, `pan`, and `zoom` which determine how to rotate the camera.\n\n### `ArcballCamera.matrix()`\n\nReturns a 4x4 homogeneous transformation matrix representing the position of the object relative to the arcball camera.\n\nAcknowledgements\n================\n\n(c) 2013 Mikola Lysenko (mikolalysenko@gmail.com).  MIT License",
  "_id": "arcball@0.0.0",
  "_from": "arcball@~0.0.0"
}
